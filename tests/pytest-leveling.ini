[pytest]
# Pytest configuration for leveling system tests
asyncio_mode = strict
asyncio_default_fixture_loop_scope = function
asyncio_default_test_loop_scope = function

# Test discovery
python_files = 
    test_*leveling*.py
    test_comprehensive_leveling_*.py
    test_*_leveling_*.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = 
    tests
    tests/fixtures

# Add options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=modules.xp_calculator
    --cov=modules.level_manager
    --cov=modules.achievement_engine
    --cov=modules.user_leveling_service
    --cov=modules.leveling_models
    --cov=modules.leveling_cache
    --cov=modules.leveling_performance_monitor
    --cov-report=term-missing
    --cov-report=html:htmlcov/leveling
    --cov-fail-under=80
    -p no:warnings

# Markers for leveling tests
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interaction
    performance: Performance and load tests
    slow: Slow running tests (may be skipped in CI)
    leveling: All leveling system tests
    xp_calculator: XP calculation tests
    level_manager: Level management tests
    achievement_engine: Achievement system tests
    user_service: User leveling service tests
    database: Tests requiring database operations
    concurrent: Tests involving concurrent operations
    memory: Memory usage and leak tests
    requirements: Tests validating specific requirements

# Filter warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::pytest.PytestUnraisableExceptionWarning
    ignore::RuntimeWarning:asyncio
    ignore::UserWarning:telegram

# Minimum version
minversion = 6.0

# Test timeout (in seconds)
timeout = 300

# Parallel execution settings
# Uncomment to enable parallel test execution
# addopts = --numprocesses=auto