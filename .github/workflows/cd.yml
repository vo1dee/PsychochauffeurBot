name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
      deploy:
        description: "Deploy to production"
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.10'

jobs:
  build:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate build
      run: |
        echo "Build validation - skipping tests as they run in CI"
        python -c "import modules; print('Modules can be imported successfully')"
    
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${GITHUB_SHA::8}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create deployment package
      run: |
        # Create a deployment package without Docker
        mkdir -p deployment
        cp -r modules/ config/ scripts/ requirements.txt deployment/
        tar -czf deployment-${{ steps.version.outputs.version }}.tar.gz deployment/
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment-${{ steps.version.outputs.version }}.tar.gz

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'production' || inputs.deploy))
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
    
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add Host Key
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to VM
      env:
        VM_USER: ${{ secrets.VM_USER }}
        VM_HOST: ${{ secrets.VM_HOST }}
      run: |
        ssh -o StrictHostKeyChecking=no $VM_USER@$VM_HOST "sudo /home/ubuntu/psychochauffeurbot/scripts/deploy_existing.sh"

    - name: Verify Deployment
      env:
        VM_USER: ${{ secrets.VM_USER }}
        VM_HOST: ${{ secrets.VM_HOST }}
      run: |
        sleep 5
        ssh $VM_USER@$VM_HOST "bash -s" << EOF
          if systemctl is-active --quiet chauffeur-bot.service; then
            echo "Bot service is running successfully"
            exit 0
          else
            echo "Bot service is not running!"
            exit 1
          fi
        EOF
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Production deployment ${{ job.status }} - Version: ${{ needs.build.outputs.version }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}



  rollback:
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: [deploy-production]
    environment: production
    
    steps:
    - name: Rollback deployment
      run: |
        echo "Rolling back deployment..."
        # Add rollback commands here
        # Examples:
        # - Restore previous version from backup
        # - Restart services with previous configuration
        # - Rollback database migrations if needed
        
        echo "Rollback completed"
    
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#deployments'
        text: 'Deployment rolled back due to failure'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}