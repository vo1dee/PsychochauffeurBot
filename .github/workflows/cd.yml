name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.10'

jobs:
  build:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        # Install test dependencies
        sudo apt-get update
        sudo apt-get install -y postgresql postgresql-contrib redis-server
        sudo systemctl start postgresql redis-server
        sudo -u postgres createdb test_db
        sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"
        
        # Set environment variables
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db
        export REDIS_URL=redis://localhost:6379
        export TELEGRAM_BOT_TOKEN=test_token
        export OPENAI_API_KEY=test_key
        export OPENWEATHER_API_KEY=test_key
        
        # Initialize database and run tests
        python scripts/init_database.py
        pytest tests/ -v --cov=modules --cov=config --cov-report=xml --cov-fail-under=5
    
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${GITHUB_SHA::8}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create deployment package
      run: |
        # Create a deployment package without Docker
        mkdir -p deployment
        cp -r modules/ config/ scripts/ requirements.txt deployment/
        tar -czf deployment-${{ steps.version.outputs.version }}.tar.gz deployment/
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment-${{ steps.version.outputs.version }}.tar.gz

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
    
    - name: Deploy to staging
      run: |
        echo "Deploying version ${{ needs.build.outputs.version }} to staging environment..."
        # Extract deployment package
        tar -xzf deployment-${{ needs.build.outputs.version }}.tar.gz
        
        # Add your staging deployment commands here
        # Examples:
        # - Copy files to staging server via SSH/SCP
        # - Update systemd service
        # - Restart application
        # - Update configuration files
        
        echo "Staging deployment completed"
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here
        # python scripts/smoke_tests.py --environment=staging
        echo "Smoke tests completed"
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Staging deployment ${{ job.status }} - Version: ${{ needs.build.outputs.version }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
    
    - name: Deploy to production
      run: |
        echo "Deploying version ${{ needs.build.outputs.version }} to production environment..."
        # Extract deployment package
        tar -xzf deployment-${{ needs.build.outputs.version }}.tar.gz
        
        # Add your production deployment commands here
        # Examples:
        # - Copy files to production server via SSH/SCP
        # - Update systemd service
        # - Restart application with zero downtime
        # - Update configuration files
        # - Run database migrations
        
        echo "Production deployment completed"
    
    - name: Run health checks
      run: |
        echo "Running production health checks..."
        # python scripts/health_check.py --environment=production
        echo "Health checks completed"
    
    - name: Create GitHub release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Production deployment ${{ job.status }} - Version: ${{ needs.build.outputs.version }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    environment: production
    
    steps:
    - name: Rollback deployment
      run: |
        echo "Rolling back deployment..."
        # Add rollback commands here
        # Examples:
        # - Restore previous version from backup
        # - Restart services with previous configuration
        # - Rollback database migrations if needed
        
        echo "Rollback completed"
    
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#deployments'
        text: 'Deployment rolled back due to failure'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}