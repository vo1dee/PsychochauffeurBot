"""
Enhanced flares command with comprehensive error logging and diagnostics.

This module provides an enhanced version of the flares command that includes:
- Comprehensive error logging and diagnostics
- Performance metrics tracking
- External service monitoring
- User-friendly error messages
- Configuration validation

Requirements addressed: 3.1, 3.2, 3.3, 3.4, 3.5
"""

import os
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

from telegram import Update
from telegram.ext import ContextTypes

from modules.command_diagnostics import (
    enhance_command_with_diagnostics,
    track_api_call,
    log_command_milestone,
    log_command_performance_metric,
    validate_command_configuration,
    check_command_dependencies
)
from modules.enhanced_error_diagnostics import enhanced_diagnostics
from modules.structured_logging import StructuredLogger, LogLevel
from modules.error_handler import ErrorHandler, StandardError, ErrorCategory, ErrorSeverity
from modules.const import KYIV_TZ, Config
from modules.logger import general_logger, error_logger


class EnhancedFlaresCommand:
    """
    Enhanced flares command with comprehensive diagnostics and error handling.
    
    This class wraps the existing flares command functionality with enhanced
    logging, metrics tracking, and diagnostic capabilities.
    """
    
    def __init__(self) -> None:
        self.logger = StructuredLogger("enhanced_flares")
    
    @enhance_command_with_diagnostics("flares")
    async def flares_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Enhanced flares command with comprehensive diagnostics.
        
        This method provides the same functionality as the original flares command
        but with enhanced error logging, performance tracking, and diagnostics.
        """
        if not update.effective_chat or not update.effective_user:
            return
        
        # Extract user and chat information
        chat_id = int(update.effective_chat.id)
        user_id = int(update.effective_user.id)
        username = update.effective_user.username or f"ID:{user_id}"
        
        # Validate configuration before proceeding
        config_validation = await validate_command_configuration("flares")
        if not config_validation["valid"]:
            error_message = (
                "‚ùå –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥–∏ flares –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–∫–∏.\n"
                "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º."
            )
            
            self.logger.log_event(
                LogLevel.ERROR,
                "flares_config_invalid",
                "Flares command configuration validation failed",
                user_id=user_id,
                chat_id=chat_id,
                issues=config_validation["issues"]
            )
            
            if update.message:
                await update.message.reply_text(error_message)
            return
        
        # Check command dependencies
        dependency_check = await check_command_dependencies("flares")
        if not dependency_check["healthy"]:
            error_message = (
                "‚ùå –î–µ—è–∫—ñ —Å–µ—Ä–≤—ñ—Å–∏, –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω—ñ–º–∫—ñ–≤, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            
            self.logger.log_event(
                LogLevel.ERROR,
                "flares_dependencies_unhealthy",
                "Flares command dependencies are unhealthy",
                user_id=user_id,
                chat_id=chat_id,
                dependencies=dependency_check["dependencies"]
            )
            
            if update.message:
                await update.message.reply_text(error_message)
            return
        
        log_command_milestone("flares", "validation_completed", 
                            user_id=user_id, chat_id=chat_id)
        
        status_msg = None
        try:
            # Initialize screenshot manager with enhanced diagnostics
            from modules.utils import ScreenshotManager
            manager = ScreenshotManager()
            
            # Check tool availability with detailed logging
            if not manager._check_wkhtmltoimage_availability():
                error_message = (
                    "‚ùå –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–Ω—ñ–º–∫—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.\n"
                    "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è wkhtmltoimage."
                )
                
                self.logger.log_event(
                    LogLevel.ERROR,
                    "flares_tool_unavailable",
                    "wkhtmltoimage tool is not available",
                    user_id=user_id,
                    chat_id=chat_id
                )
                
                if update.message:
                    await update.message.reply_text(error_message)
                return
            
            log_command_milestone("flares", "tool_check_passed", 
                                user_id=user_id, chat_id=chat_id)
            
            # Get status information for better progress indicators
            status_info = manager.get_screenshot_status_info()
            
            # Log detailed status information
            self.logger.log_event(
                LogLevel.INFO,
                "flares_status_check",
                "Screenshot status information gathered",
                user_id=user_id,
                chat_id=chat_id,
                status_info=status_info
            )
            
            # Show initial status message with diagnostic info
            initial_status = "üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∑–Ω—ñ–º–∫—É..."
            if not status_info['tool_available']:
                initial_status += "\n‚ö†Ô∏è –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç wkhtmltoimage –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
            elif not status_info['directory_exists']:
                initial_status += "\nüìÅ –°—Ç–≤–æ—Ä—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∑–Ω—ñ–º–∫—ñ–≤..."
            elif status_info['has_screenshot'] and status_info['is_fresh']:
                initial_status += "\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∑–Ω—ñ–º–æ–∫"
            elif status_info['has_screenshot']:
                initial_status += f"\nüïê –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –∑–Ω—ñ–º–æ–∫ (–≤—ñ–∫: {status_info['age_hours']:.1f} –≥–æ–¥)"
            
            if update.message:
                status_msg = await update.message.reply_text(initial_status)
            
            log_command_milestone("flares", "status_message_sent", 
                                user_id=user_id, chat_id=chat_id)
            
            # Try to get current screenshot with API call tracking
            screenshot_path = None
            
            if not status_info['has_screenshot'] or not status_info['is_fresh']:
                # Need to generate new screenshot - track the API call
                log_command_milestone("flares", "generating_screenshot", 
                                    user_id=user_id, chat_id=chat_id)
                
                # Update status message
                if status_msg:
                    progress_msg = (
                        "üîÑ –ì–µ–Ω–µ—Ä—É—é –Ω–æ–≤–∏–π –∑–Ω—ñ–º–æ–∫ —Å–æ–Ω—è—á–Ω–∏—Ö —Å–ø–∞–ª–∞—Ö—ñ–≤...\n"
                        "‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 15-30 —Å–µ–∫—É–Ω–¥\n"
                        "üìä –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–∞–Ω—ñ –∑ api.meteoagent.com..."
                    )
                    await status_msg.edit_text(progress_msg)
                
                # Track the external API call to MeteoAgent
                async with track_api_call("meteoagent", "api.meteoagent.com", "GET") as api_tracker:
                    try:
                        screenshot_path = await manager.get_current_screenshot()
                        api_tracker.set_status_code(200)  # Assume success if no exception
                    except Exception as api_error:
                        api_tracker.set_status_code(500)  # API call failed
                        raise api_error
            else:
                # Use existing fresh screenshot
                log_command_milestone("flares", "using_cached_screenshot", 
                                    user_id=user_id, chat_id=chat_id)
                
                screenshot_path = await manager.get_current_screenshot()
                
                if status_msg:
                    await status_msg.edit_text("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∑–Ω—ñ–º–æ–∫...")
            
            # Validate screenshot generation
            if not screenshot_path or not os.path.exists(screenshot_path):
                error_message = (
                    "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –∑–Ω–∞–π—Ç–∏ –∑–Ω—ñ–º–æ–∫ —Å–æ–Ω—è—á–Ω–∏—Ö —Å–ø–∞–ª–∞—Ö—ñ–≤.\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
                
                self.logger.log_event(
                    LogLevel.ERROR,
                    "flares_screenshot_generation_failed",
                    "Screenshot generation failed or file not found",
                    user_id=user_id,
                    chat_id=chat_id,
                    screenshot_path=screenshot_path,
                    file_exists=os.path.exists(screenshot_path) if screenshot_path else False
                )
                
                # Clean up status message
                if status_msg:
                    await status_msg.edit_text(error_message)
                elif update.message:
                    await update.message.reply_text(error_message)
                return
            
            log_command_milestone("flares", "screenshot_ready", 
                                screenshot_path=screenshot_path,
                                file_size=os.path.getsize(screenshot_path),
                                user_id=user_id, chat_id=chat_id)
            
            # Get file information for metrics and caption
            file_stats = os.stat(screenshot_path)
            file_size_mb = file_stats.st_size / (1024 * 1024)
            mod_time = datetime.fromtimestamp(file_stats.st_mtime)
            mod_time = mod_time.astimezone(KYIV_TZ)
            
            # Calculate next update time
            kyiv_now = datetime.now(KYIV_TZ)
            hours_since_update = (kyiv_now - mod_time).total_seconds() / 3600
            hours_until_next = max(0, manager.FRESHNESS_THRESHOLD_HOURS - hours_since_update)
            next_screenshot = kyiv_now + timedelta(hours=hours_until_next)
            
            # Determine freshness status
            freshness_status = "–∞–∫—Ç—É–∞–ª—å–Ω–∏–π" if hours_since_update < manager.FRESHNESS_THRESHOLD_HOURS else "–∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π"
            
            # Prepare caption with enhanced information
            caption = (
                f"üåû –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–Ω—è—á–Ω–∏—Ö —Å–ø–∞–ª–∞—Ö—ñ–≤ —ñ –º–∞–≥–Ω—ñ—Ç–Ω–∏—Ö –±—É—Ä—å\n\n"
                f"üìÖ –ß–∞—Å –∑–Ω—ñ–º–∫—É: {mod_time.strftime('%H:%M %d.%m.%Y')}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {freshness_status}\n"
                f"üîÑ –ù–∞—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {next_screenshot.strftime('%H:%M %d.%m.%Y')}\n"
                f"üìÅ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {file_size_mb:.1f} MB\n\n"
                f"üîó –î–∂–µ—Ä–µ–ª–æ: api.meteoagent.com"
            )
            
            # Delete status message before sending photo
            if status_msg:
                await status_msg.delete()
                status_msg = None
            
            log_command_milestone("flares", "sending_screenshot", 
                                user_id=user_id, chat_id=chat_id)
            
            # Send the screenshot with error handling
            try:
                with open(screenshot_path, 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=chat_id,
                        photo=photo,
                        caption=caption
                    )
                
                log_command_milestone("flares", "screenshot_sent_successfully", 
                                    user_id=user_id, chat_id=chat_id)
                
                # Log performance metrics
                log_command_performance_metric(
                    "flares", "screenshot_file_size", file_size_mb, "MB",
                    user_id=user_id, chat_id=chat_id
                )
                
                log_command_performance_metric(
                    "flares", "screenshot_age_hours", hours_since_update, "hours",
                    user_id=user_id, chat_id=chat_id
                )
                
                # Log successful completion
                self.logger.log_event(
                    LogLevel.INFO,
                    "flares_completed_successfully",
                    "Flares command completed successfully",
                    user_id=user_id,
                    chat_id=chat_id,
                    screenshot_path=screenshot_path,
                    file_size_mb=file_size_mb,
                    freshness_status=freshness_status,
                    hours_since_update=hours_since_update
                )
                
            except Exception as send_error:
                error_message = (
                    "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–Ω—ñ–º–æ–∫ —Å–æ–Ω—è—á–Ω–∏—Ö —Å–ø–∞–ª–∞—Ö—ñ–≤.\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
                
                self.logger.log_event(
                    LogLevel.ERROR,
                    "flares_send_failed",
                    f"Failed to send screenshot: {str(send_error)}",
                    user_id=user_id,
                    chat_id=chat_id,
                    screenshot_path=screenshot_path,
                    error=str(send_error)
                )
                
                if update.message:
                    await update.message.reply_text(error_message)
                
                raise send_error
                
        except Exception as e:
            # Enhanced error handling with detailed context
            error_context = {
                "command": "flares",
                "user_id": user_id,
                "chat_id": chat_id,
                "username": username,
                "screenshot_path": locals().get('screenshot_path'),
                "status_info": locals().get('status_info', {})
            }
            
            # Create a standardized error
            standard_error = StandardError(
                message=f"Flares command failed: {str(e)}",
                severity=ErrorSeverity.HIGH,
                category=self._categorize_error(e),
                context=error_context,
                original_exception=e
            )
            
            # Handle the error with comprehensive logging
            await ErrorHandler.handle_error(
                error=standard_error,
                update=update,
                context=context,
                context_data=error_context,
                propagate=False
            )
            
            # Clean up status message
            if status_msg:
                try:
                    await status_msg.delete()
                except:
                    pass
            
            # Send user-friendly error message
            user_error_message = self._get_user_friendly_error_message(e)
            
            if update.message:
                try:
                    await update.message.reply_text(user_error_message)
                except Exception:
                    pass  # Don't fail if we can't send the error message
    
    def _categorize_error(self, error: Exception) -> ErrorCategory:
        """Categorize error based on its type and message."""
        error_str = str(error).lower()
        error_type = type(error).__name__
        
        if "network" in error_str or "connection" in error_str or "timeout" in error_str:
            return ErrorCategory.NETWORK
        elif "api" in error_str or "meteoagent" in error_str:
            return ErrorCategory.API
        elif "file" in error_str or "directory" in error_str or "permission" in error_str:
            return ErrorCategory.RESOURCE
        elif "wkhtmltoimage" in error_str or "tool" in error_str:
            return ErrorCategory.RESOURCE
        else:
            return ErrorCategory.GENERAL
    
    def _get_user_friendly_error_message(self, error: Exception) -> str:
        """Generate user-friendly error message based on error type."""
        error_str = str(error).lower()
        
        # Network/API errors
        if "network" in error_str or "connection" in error_str or "timeout" in error_str:
            return (
                "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ –º–µ—Ä–µ–∂–µ–≤–∏–º –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ —Å–µ—Ä–≤—ñ—Å—É –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤.\n"
                "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
        
        # API errors
        if "api" in error_str or "meteoagent" in error_str:
            return (
                "‚ùå –°–µ—Ä–≤—ñ—Å –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ —Å–æ–Ω—è—á–Ω–∏—Ö —Å–ø–∞–ª–∞—Ö—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
        
        # File/resource errors
        if "file" in error_str or "directory" in error_str or "permission" in error_str:
            return (
                "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ —Ñ–∞–π–ª–æ–≤–æ—é —Å–∏—Å—Ç–µ–º–æ—é –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–Ω—ñ–º–∫—É.\n"
                "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏."
            )
        
        # Tool errors
        if "wkhtmltoimage" in error_str or "tool" in error_str:
            return (
                "‚ùå –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–Ω—ñ–º–∫—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –ø—Ä–∞—Ü—é—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ.\n"
                "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è wkhtmltoimage."
            )
        
        # Generic error
        return (
            "‚ùå –ü—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–Ω—ñ–º–∫—É —Å–æ–Ω—è—á–Ω–∏—Ö —Å–ø–∞–ª–∞—Ö—ñ–≤ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )


# Global instance
enhanced_flares = EnhancedFlaresCommand()


# Export the enhanced command handler
async def enhanced_flares_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Enhanced flares command handler for external use."""
    await enhanced_flares.flares_command(update, context)