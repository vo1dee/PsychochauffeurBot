from telegram import Update
from telegram.ext import ContextTypes

async def count_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Count the number of encounters of a word in the entire chat history.
    Usage: /count <word>
    """
    chat_id = update.effective_chat.id
    args = context.args if hasattr(context, 'args') else []
    if not args or len(args) != 1:
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –æ–¥–Ω–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É.\n–ü—Ä–∏–∫–ª–∞–¥: /count —Å–æ–Ω—Ü–µ"
        )
        return
    word = args[0].strip().lower()
    if not word.isalpha():
        await update.message.reply_text(
            "‚ùå –°–ª–æ–≤–æ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏."
        )
        return
    try:
        from modules.chat_analysis import get_last_n_messages_in_chat
        # Use a very large number to fetch all messages (e.g., 1_000_000)
        messages = await get_last_n_messages_in_chat(chat_id, 1_000_000)
        count = 0
        for _, _, text in messages:
            if not text:
                continue
            # Whole word, case-insensitive match
            import re
            count += len(re.findall(rf'\\b{re.escape(word)}\\b', text, flags=re.IGNORECASE))
        if count == 0:
            msg = f"üìä –°–ª–æ–≤–æ '{word}' –Ω–µ –∑—É—Å—Ç—Ä—ñ—á–∞–ª–æ—Å—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Ü—å–æ–≥–æ —á–∞—Ç—É."
        elif count == 1:
            msg = f"üìä –°–ª–æ–≤–æ '{word}' –∑—É—Å—Ç—Ä—ñ–ª–æ—Å—è 1 —Ä–∞–∑ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Ü—å–æ–≥–æ —á–∞—Ç—É."
        else:
            msg = f"üìä –°–ª–æ–≤–æ '{word}' –∑—É—Å—Ç—Ä—ñ–ª–æ—Å—è {count} —Ä–∞–∑—ñ–≤ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Ü—å–æ–≥–æ —á–∞—Ç—É."
        await update.message.reply_text(msg)
    except Exception as e:
        from modules.logger import error_logger
        error_logger.error(f"Error in /count command: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        ) 